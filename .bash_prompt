#!/bin/sh

# based on https://github.com/mathiasbynens/dotfiles/blob/master/.bash_prompt
if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}

bold=$(tput bold);
reset=$(tput sgr0);
black=$(tput setaf 0);
dark_red=$(tput setaf 1);
dark_green=$(tput setaf 2);
dark_yellow=$(tput setaf 3);
dark_blue=$(tput setaf 4);
dark_purple=$(tput setaf 5);
dark_cyan=$(tput setaf 6);
dark_grey=$(tput setaf 7);
darker_grey=$(tput setaf 8);
light_red=$(tput setaf 9);
light_green=$(tput setaf 10);
light_yellow=$(tput setaf 11);
light_purple=$(tput setaf 12);
light_pink=$(tput setaf 13);
light_cyan=$(tput setaf 14);
light_grey=$(tput setaf 15);

fs_mode() {
	mode=$(mount | sed -n -e "s/^\/dev\/.* on \/ .*(\(r[w|o]\).*/\1/p")
	if [ "$mode" = "rw" ]
	then
		echo "${bold}${dark_red}rw${reset}"
	else
		echo "ro"
	fi
}

PS1="\[${bold}${dark_red}\]\u\[${reset}\]";
PS1+=" at \[${bold}${dark_purple}\]\h\[${reset}\] (\$(fs_mode))";
PS1+=" in \[${bold}${dark_green}\]\w\[${reset}\]";
PS1+="\$(prompt_git \" on \[${bold}${dark_blue}\]\" \"\[${bold}${dark_blue}\]\")";
PS1+="\[${reset}\]\n$ ";
export PS1
